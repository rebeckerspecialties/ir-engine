name: IR Engine Native App Deployment

permissions:
  id-token: write
  contents: write
  deployments: write

on:
  workflow_dispatch:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - add-crash-reporting

jobs:
  build_ios_app:
    runs-on: macos-latest
    steps:
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          ./scripts/decrypt-provisioning-profile.sh
          cat $HOME/secrets/irengine-profile-base64.txt | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: build javascript bundle
        run: |
          cd packages/clientNative
          npm install
          npm run build:ios:release

      - uses: actions/cache/restore@v4
        id: cache-xcarchive
        with:
          path: ./packages/clientNative/clientNative.xcarchive
          key: ${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}

      - name: build archive
        if: steps.cache-xcarchive.outputs.cache-hit != 'true'
        run: |
          cd packages/clientNative
          pod install --project-directory=ios

          xcodebuild -scheme "clientNative" \
          -archivePath "clientNative.xcarchive" \
          -workspace ios/clientNative.xcworkspace \
          -configuration Release \
          -sdk iphoneos \
          -destination generic/platform=iOS \
          -allowProvisioningUpdates \
          DEVELOPMENT_TEAM=${{ secrets.DEVELOPMENT_TEAM_ID }} \
          clean archive

      - uses: actions/cache/save@v4
        with:
          path: ./packages/clientNative/clientNative.xcarchive
          key: ${{ steps.cache-xcarchive.outputs.cache-primary-key }}

      - name: export ipa
        run: |
          cd packages/clientNative
          ls
          xcodebuild -exportArchive -archivePath clientNative.xcarchive -exportOptionsPlist clientNative.xcarchive/Info.plist -exportPath ${{ runner.temp }}/build

      - name: Upload application
        uses: actions/upload-artifact@v4
        with:
          name: IREngineApp
          path: ${{ runner.temp }}/build/clientNative.ipa
          retention-days: 1

      - name: Upload source maps
        uses: actions/upload-artifact@v4
        with:
          name: IREngineBundle
          path: packages/clientNative/main.jsbundle.map
          retention-days: 30
